)
model %>%
fit(
x = mnist$train$x, y = mnist$train$y,
epochs = 5,
validation_split = .2,
verbose = 2
)
predictions <- predict(model, mnist$test$x)
model %>%
evaluate(mnist$test$x, mnist$test$y, verbose = 0)
}
create_nn(train)
create_nn(train)
install.packages(dplyr)
install.packages("dplyr")
library(dplyr)
create_nn <- function(train)
{
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(ncol(train), 1)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10, activation = "softmax")
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = mnist$train$x, y = mnist$train$y,
epochs = 5,
validation_split = .2,
verbose = 2
)
predictions <- predict(model, mnist$test$x)
model %>%
evaluate(mnist$test$x, mnist$test$y, verbose = 0)
}
library(dplyr)
create_nn <- function(train)
{
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(ncol(train), 1)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10, activation = "softmax")
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = mnist$train$x, y = mnist$train$y,
epochs = 5,
validation_split = .2,
verbose = 2
)
predictions <- predict(model, mnist$test$x)
model %>%
evaluate(mnist$test$x, mnist$test$y, verbose = 0)
}
create_nn(train)
library(keras)
library(tensorflow)
library(dplyr)
mnist <- dataset_mnist()
mnist$train$x <- mnist$train$x/255
mnist$test$x <- mnist$test$x/255
train <- matrix(mnist$train$x, 60000, 784)
test <- matrix(mnist$test$x, 10000, 784)
create_nn <- function(train)
{
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(ncol(train), 1)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10, activation = "softmax")
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = mnist$train$x, y = mnist$train$y,
epochs = 5,
validation_split = .2,
verbose = 2
)
predictions <- predict(model, mnist$test$x)
model %>%
evaluate(mnist$test$x, mnist$test$y, verbose = 0)
}
create_nn(train)
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
points(x, y)
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y)
points(x, y)
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y)
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(-1, 1.2)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
x <- c(4, 5, 2, 4, 2, 3, 5)
y <- c(1, 1, 2, 2, 4, 4, 4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(-4, 2)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(-4, 2)
points(2.1, .9)
plot(2.1, .9)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(-4, 2)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
points(2.1, .9)
abline(-4, 2)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
points(2.1, .9, col = "green")
abline(-4, 2)
x1 <- c(4, 5, 2, 4, 2, 3, 5)
y1 <- c(1, 1, 2, 2, 4, 4, 4)
plot(x1, y1, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(2, -4)
plot(x1, y1, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
abline(-4, 2)
plot(x, y, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
points(2.1, .9, col = "green")
abline(-4, 2)
plot(x1, y1, col = c("red", "red", "blue" ,"red","blue","blue", "red"))
points(2.1, .9, col = "green")
abline(-4, 2)
x3 <- c(1, 2, 3, 4, 1, 2, 4)
y3 <- c(1, 1, 2, 2, 4, 4, 3)
plot(x3, y3)
x3 <- c(1, 2, 3, 4, 1, 2, 4)
y3 <- c(1, 1, 2, 2, 4, 4, 3)
plot(x3, y3)
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(mean(x3[4]), mean(x3[4]))
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(mean(x3[4]), mean(x3[4]))
c3
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(x3[4], x3[4])
c3
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(x3[4], y3[4])
c3
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(x3[4], y3[4])
c3
plot(x3, y3)
points(c1, c2, c3)
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(x3[4], y3[4])
c3
plot(x3, y3)
points(c1)
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(x3[4], y3[4])
c3
plot(x3, y3)
points(c1, col = "blue")
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(x3[4], y3[4])
c3
centroid_x <- c(mean(x3[1:3]), mean(x3[5:7]), mean(x3[4]))
centroid_y <- c(mean(y3[1:3]), mean(y3[5:7]), mean(y3[4]))
plot(x3, y3)
points(c1, col = "blue")
c1 <- c(mean(x3[1:3]), mean(y3[1:3]))
c1
c2 <- c(mean(x3[5:7]), mean(y3[5:7]))
c2
c3 <- c(x3[4], y3[4])
c3
centroid_x <- c(mean(x3[1:3]), mean(x3[5:7]), mean(x3[4]))
centroid_y <- c(mean(y3[1:3]), mean(y3[5:7]), mean(y3[4]))
centroid_x
centroid_y
plot(x3, y3)
points(c1, col = "blue")
centroid_x <- c(mean(x3[1:3]), mean(x3[5:7]), mean(x3[4]))
centroid_y <- c(mean(y3[1:3]), mean(y3[5:7]), mean(y3[4]))
centroid_x
centroid_y
plot(x3, y3)
points(c1, col = "blue")
centroid_x <- c(mean(x3[1:3]), mean(x3[5:7]), mean(x3[4]))
centroid_y <- c(mean(y3[1:3]), mean(y3[5:7]), mean(y3[4]))
centroid_x
centroid_y
plot(x3, y3)
points(centroid_x, centroid_y, col = "blue")
for (i in x3)
{
i
}
for (i in x3)
{
print(i)
}
for (i = 1:7)
for (i in 1:7)
{
}
for (i in 1:7)
{
print(i)
}
for (i in 1:7)
{
for (j in 1:3)
{
d = sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
}
}
for (i in 1:7)
{
for (j in 1:3)
{
d = sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
d
}
}
for (i in 1:7)
{
for (j in 1:3)
{
d = sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
print(d)
}
}
for (i in 1:7)
{
for (j in 1:3)
{
dist <- rep(0, 3)
d = sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
print(d)
}
}
for (i in 1:7)
{
for (j in 1:3)
{
dist <- rep(0, 3)
d = sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
print(dist)
}
}
for (i in 1:7)
{
for (j in 1:3)
{
dist <- rep(0, 3)
dist[j] = sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
print(dist)
}
}
for (i in 1:7)
{
for (j in 1:3)
{
dist <- rep(0, 3)
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
print(dist)
}
}
for (i in 1:7)
{
dist <- rep(0, 3)
for (j in 1:3)
{
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
print(dist)
}
}
new_centroid <- rep(0, 7)
for (i in 1:7)
{
dist <- rep(0, 3)
for (j in 1:3)
{
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
}
new_centroid[i] <- which.min(dist)
}
new_centroid <- rep(0, 7)
for (i in 1:7)
{
dist <- rep(0, 3)
for (j in 1:3)
{
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
}
new_centroid[i] <- which.min(dist)
}
new_centroid
new_centroid <- rep(0, 7)
for (i in 1:7)
{
dist <- rep(0, 3)
for (j in 1:3)
{
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
}
new_centroid[i] <- which.min(dist)
}
new_centroid
new_centroid[c(1, 3, 5)]
new_centroid_x <- c(mean(x3[1:2]), mean(x3[c(3, 4, 7)]), mean(x3[5:6]))
new_centroid_y <- c(mean(y3[1:2]), mean(y3[c(3, 4, 7)]), mean(y3[5:6]))
new_centroid_x <- c(mean(x3[1:2]), mean(x3[c(3, 4, 7)]), mean(x3[5:6]))
new_centroid_y <- c(mean(y3[1:2]), mean(y3[c(3, 4, 7)]), mean(y3[5:6]))
plot(x3, y3)
points(new_centroid_x, new_centroid_y, col = "blue")
centroid_x <- c(mean(x3[1:2]), mean(x3[c(3, 4, 7)]), mean(x3[5:6]))
centroid_y <- c(mean(y3[1:2]), mean(y3[c(3, 4, 7)]), mean(y3[5:6]))
plot(x3, y3)
points(centroid_x, centroid_y, col = "blue")
new_centroid <- rep(0, 7)
for (i in 1:7)
{
dist <- rep(0, 3)
for (j in 1:3)
{
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
}
new_centroid[i] <- which.min(dist)
}
new_centroid
centroid_x <- c(mean(x3[1:2]), mean(x3[c(3, 4, 7)]), mean(x3[5:6]))
centroid_y <- c(mean(y3[1:2]), mean(y3[c(3, 4, 7)]), mean(y3[5:6]))
centroid_x
centroid_y
plot(x3, y3)
points(centroid_x, centroid_y, col = "blue")
centroid_x <- c(mean(x3[1:2]), mean(x3[5:6]), mean(x3[c(3, 4, 7)]))
centroid_y <- c(mean(y3[1:2]), mean(y3[5:6]), mean(y3[c(3, 4, 7)]))
centroid_x
centroid_y
plot(x3, y3)
points(centroid_x, centroid_y, col = "blue")
new_centroid <- rep(0, 7)
for (i in 1:7)
{
dist <- rep(0, 3)
for (j in 1:3)
{
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
}
new_centroid[i] <- which.min(dist)
}
new_centroid
new_centroid <- rep(0, 7)
for (i in 1:7)
{
dist <- rep(0, 3)
for (j in 1:3)
{
dist[j] <- sqrt((x3[i] - centroid_x[j])^2 + (y3[i] - centroid_y[j])^2)
}
new_centroid[i] <- which.min(dist)
}
new_centroid
centroid_x <- c(mean(x3[1:2]), mean(x3[5:6]), mean(x3[c(3, 4, 7)]))
centroid_y <- c(mean(y3[1:2]), mean(y3[5:6]), mean(y3[c(3, 4, 7)]))
centroid_x
centroid_y
plot(x3, y3)
points(centroid_x, centroid_y, col = "blue")
person-year <- 25 * 1138
person_year <- 25 * 1138
prop <- 67/1138
prop * person_year
rate <- 67/28450
rate <- 67/28450
rate
rate <- 67/28450
incident_rate <- 235.5/100000
rate <- 67/person_year
incident_rate <- 235.5/100000
expected_count <- rate * person_year
univ_incidence_rate <- 326/100000
expected_count <- rate * person_year
univ_incidence_rate <- 326/100000
expected_count <- univ_incidence_rate * person_year
person_year <- 25 * 1138
person_year
univ_incidence_rate <- 326/100000
expected_count <- univ_incidence_rate * person_year
univ_incidence_rate <- 326/100000
expected_count <- univ_incidence_rate * person_year
expected_count
person_year <- 12.5*1138
rate <- 67/person_year
person_year <- 12.5*1138
rate <- 67/person_year
expected_count <- univ_incidence_rate * person_year
person_year <- 12.5*1138
rate <- 67/person_year
expected_count <- univ_incidence_rate * person_year
expected_count
create_nn(train)
create_nn <- function(train)
{
model <- keras_model_sequential() %>%
layer_flatten(input_shape = c(ncol(train), 1)) %>%
layer_dense(units = 128, activation = "relu") %>%
layer_dropout(0.2) %>%
layer_dense(10, activation = "softmax")
model %>%
compile(
loss = "sparse_categorical_crossentropy",
optimizer = "adam",
metrics = "accuracy"
)
model %>%
fit(
x = mnist$train$x, y = mnist$train$y,
epochs = 5,
validation_split = .2,
verbose = 2
)
predictions <- predict(model, mnist$test$x)
model %>%
evaluate(mnist$test$x, mnist$test$y, verbose = 0)
}
create_nn(train)
library(keras)
library(tensorflow)
library(dplyr)
mnist <- dataset_mnist()
mnist$train$x <- mnist$train$x/255
mnist$test$x <- mnist$test$x/255
train <- matrix(mnist$train$x, 60000, 784)
test <- matrix(mnist$test$x, 10000, 784)
pca.train <- prcomp(train, scale = F)
pca.test <- prcomp(test, scale = F)
pca.train <- prcomp(train, scale = F)
